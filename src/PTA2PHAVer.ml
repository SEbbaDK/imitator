(************************************************************
 *
 *                       IMITATOR
 *
 * Université de Lorraine, CNRS, Inria, LORIA, Nancy, France
 *
 * Module description: Convert an abstract model to the input syntax of PHAVerLite
 *
 * File contributors : Étienne André
 * Created           : 2020/03/04
 * Last modified     : 2020/03/04
 *
 ************************************************************)

open OCamlUtilities
open Result
open AbstractModel
open ImitatorUtilities
open State
open StateSpace



(************************************************************)
(** Header *)
(************************************************************)

(* Add a header to the model *)
let string_of_header model =
	let options = Input.get_options () in
	          "// --------------------------------------------------------"
	^ "\n" ^ "// here File automatically generated by " ^ Constants.program_name ^ ""
	^ "\n" ^ "// Version  : " ^ (ImitatorUtilities.program_name_and_version_and_nickname_and_build())
	^ "\n" ^ "// Git      : " ^ (ImitatorUtilities.git_branch_and_hash)
	^ "\n" ^ "// Model    : '" ^ options#model_input_file_name ^ "'"
	^ "\n" ^ "// Generated: " ^ (now()) ^ ""
	^ "\n" ^ "// --------------------------------------------------------"
    ^ "\n" ^ "//Note on parameters:" ^""
    ^ "\n" ^ "// --------------------------------------------------------"  
    ^ "\n" ^ "// --------------------------------------------------------"


(************************************************************)
(** Footer *)
(************************************************************)

(* End of the file *)
let footer = "\n"
	^ "\n" ^ "// --------------------------------------------------------"
	^ "\n" ^ "// (* The end *)"
	^ "\n" ^ "// --------------------------------------------------------"
	^ "\n" ^ "// end"
	^ "\n" ^ ""


(************************************************************)
(** Variable declarations *)
(************************************************************)

(* Convert a var_type into a string *)
let string_of_var_type = function
	| Var_type_clock -> "clock"
	| Var_type_discrete -> "discrete"
	| Var_type_parameter -> "parameter"



(* Convert the initial variable declarations into a string *)
let string_of_declarations model =
	let string_of_variables list_of_variables =
		string_of_list_of_string_with_sep "," (List.map model.variable_names list_of_variables) in

		"contr_var: "
	^
	(if model.nb_clocks > 0 then
		( (string_of_variables model.clocks_without_special_reset_clock)  ^",") else "")
	^
	(if model.nb_discrete > 0 then
		(" " ^(string_of_variables model.discrete) ) else "")
	^
	(if model.nb_parameters > 0 then
		("" ^(string_of_variables model.parameters) ) else "")
    ^" ;" 

(************************************************************)
(** Guard *)
(************************************************************)

(*** NOTE: special handling as we have a discrete and a continuous guard that must be handled homogeneously ***)

(** Convert a guard into a string *)
let string_of_guard variable_names = function
	| True_guard -> "true"
	| False_guard -> LinearConstraint.string_of_false
	| Discrete_guard discrete_guard -> LinearConstraint.string_of_d_linear_constraint variable_names discrete_guard
	| Continuous_guard continuous_guard -> LinearConstraint.string_of_pxd_linear_constraint variable_names continuous_guard
	| Discrete_continuous_guard discrete_continuous_guard ->
		(LinearConstraint.string_of_d_linear_constraint variable_names discrete_continuous_guard.discrete_guard)
		^ LinearConstraint.string_of_and ^
		(LinearConstraint.string_of_pxd_linear_constraint variable_names discrete_continuous_guard.continuous_guard)




(************************************************************)
(** Automata *)
(************************************************************)

(* Convert the synclabs of an automaton into a string *)
let string_of_synclabs model automaton_index =
	"synclabs: "
	^ (let synclabs, _ = (List.fold_left (fun (synclabs, first) action_index ->
		match model.action_types action_index with
		(* Case sync: declare *)
		| Action_type_sync ->
			synclabs
			^ (if not first then ", " else "")
			^ (model.action_names action_index)
			(* Not the first one anymore *)
			, false
		(* Case nosync: do not declare *)
		| Action_type_nosync -> (synclabs, first)
	) ("", true) (model.actions_per_automaton automaton_index)) in synclabs)
	^ ";"


(* Convert the invariant of a location into a string *)
let string_of_invariant model automaton_index location_index =
	(* Invariant *)
	"while true"
	(*^ (LinearConstraint.string_of_pxd_linear_constraint model.variable_names (model.invariants automaton_index location_index))*)
    ^ " wait { true }" 
	(* Handle stopwatches *)
	^
	let stopped = model.stopwatches automaton_index location_index in
	(* Case 1: no stopwatches *)
	if stopped = [] then " "
	(* Case 2: some clocks stopped *)
	else
	let stopped_str = string_of_list_of_string_with_sep "," (List.map model.variable_names stopped) in
	" stop{" ^ stopped_str ^ "}"


(* Convert a sync into a string *)
let string_of_sync model action_index =
	match model.action_types action_index with
	| Action_type_sync -> " sync " ^ (model.action_names action_index)
	| Action_type_nosync -> " (* sync " ^ (model.action_names action_index) ^ "*) "

(** generic template for converting clock updates into string *)
let string_of_clock_updates_template model clock_updates wrap_reset wrap_expr sep =
	match clock_updates with
		| No_update -> ""
		| Resets list_of_clocks ->
			string_of_list_of_string_with_sep sep (List.map (fun variable_index ->
				wrap_reset variable_index
			) list_of_clocks)
		| Updates list_of_clocks_lt ->
			string_of_list_of_string_with_sep sep (List.map (fun (variable_index, linear_term) ->
				wrap_expr variable_index linear_term
			) list_of_clocks_lt)

(** Convert a clock update into a string *)
let string_of_clock_updates model clock_updates =
	let sep = " & " in
	let wrap_reset variable_index =  (model.variable_names variable_index) ^ " == 0" in
	let wrap_expr variable_index linear_term = (model.variable_names variable_index)
			^ " == "
			^ (LinearConstraint.string_of_pxd_linear_term model.variable_names linear_term) in
	string_of_clock_updates_template model clock_updates wrap_reset wrap_expr sep

(* Convert an arithmetic expression into a string *)
(*** NOTE: we consider more cases than the strict minimum in order to improve readability a bit ***)
let string_of_arithmetic_expression variable_names =
	let rec string_of_arithmetic_expression = function
		(* Shortcut: Remove the "+0" / -"0" cases *)
		| DAE_plus (discrete_arithmetic_expression, DT_factor (DF_constant c))
		| DAE_minus (discrete_arithmetic_expression, DT_factor (DF_constant c)) when NumConst.equal c NumConst.zero ->
			string_of_arithmetic_expression discrete_arithmetic_expression

		| DAE_plus (discrete_arithmetic_expression, discrete_term) ->
			(string_of_arithmetic_expression discrete_arithmetic_expression)
			^ " + "
			^ (string_of_term discrete_term)

		| DAE_minus (discrete_arithmetic_expression, discrete_term) ->
			(string_of_arithmetic_expression discrete_arithmetic_expression)
			^ " - "
			^ (string_of_term discrete_term)

		| DAE_term discrete_term -> string_of_term discrete_term

	and string_of_term = function
		(* Eliminate the '1' coefficient *)
		| DT_mul (DT_factor (DF_constant c), discrete_factor) when NumConst.equal c NumConst.one ->
			string_of_factor discrete_factor
		(* No parentheses for constant * variable *)
		| DT_mul (DT_factor (DF_constant c), DF_variable v) ->
			(string_of_factor (DF_constant c))
			^ " * "
			^ (string_of_factor (DF_variable v))
		(*** TODO: No parentheses on the left for constant or variable * something ***)
		(* Otherwise: parentheses on the left *)
		| DT_mul (discrete_term, discrete_factor) ->
			"(" ^ (string_of_term discrete_term) ^ ")"
			^ " * "
			^ (string_of_factor discrete_factor)

		(*** TODO: No parentheses on the left for constant or variable / something ***)
		(*** TODO: No parentheses on the left for something / constant or variable ***)
		(* Otherwise: parentheses on the left *)
		| DT_div (discrete_term, discrete_factor) ->
			"(" ^ (string_of_term discrete_term) ^ ")"
			^ " / "
			^ (string_of_factor discrete_factor)

		| DT_factor discrete_factor -> string_of_factor discrete_factor

	and string_of_factor = function
		| DF_variable discrete_index -> variable_names discrete_index
		| DF_constant discrete_value -> NumConst.string_of_numconst discrete_value
		| DF_expression discrete_arithmetic_expression ->
			(*** TODO: simplify a bit? ***)
			"(" ^ (string_of_arithmetic_expression discrete_arithmetic_expression) ^ ")"
	(* Call top-level *)
	in string_of_arithmetic_expression



(* Convert a list of discrete updates into a string *)
let string_of_discrete_updates ?(sep=", ") model updates =
	string_of_list_of_string_with_sep sep (List.map (fun (variable_index, arithmetic_expression) ->
		(* Convert the variable name *)
		(model.variable_names variable_index)
		^ " := "
		(* Convert the arithmetic_expression *)
		^ (string_of_arithmetic_expression model.variable_names arithmetic_expression)
	) updates)


(** Convert a logical operation into a string *)

(**/////////////////////// code ajouts*)
let string_of_logical_operators lop =
	let string_of_boolean_operations op =
		match op with
		| BOOL_L -> "<"
		| BOOL_LEQ -> "<="
		| BOOL_EQ -> "=="
		| BOOL_NEQ -> "<>"
		| BOOL_GEQ -> ">="
		| BOOL_G -> ">"
	in
	match lop with
	| True_bool -> "true"
	| False_bool -> "False"
	| Not_bool _ -> "<>"
	| And_bool _ -> " & "
	| Or_bool _ -> " | "
	| Expression_bool (_, op, _) -> " " ^ (string_of_boolean_operations op) ^ " "
(**/////////////////////// code ajouts*)

(** Generic template to convert a boolean expression into a string *)
let rec string_of_boolean_template variable_names boolean_expr str_lop=
	let symbol = str_lop boolean_expr in
	match boolean_expr with
		| True_bool -> "true"
		| False_bool -> "False"
		| Not_bool b -> symbol ^ "(" ^ (string_of_boolean_template variable_names b str_lop) ^ ")"
		| And_bool (b1, b2) -> (string_of_boolean_template variable_names b1 str_lop)
													^ symbol ^ (string_of_boolean_template variable_names b2 str_lop)
		| Or_bool (b1, b2) -> (string_of_boolean_template variable_names b1 str_lop)
												^ symbol ^ (string_of_boolean_template variable_names b2 str_lop)
		| Expression_bool (expr1, op, expr2) -> (string_of_arithmetic_expression variable_names expr1)
																					^ symbol
																					^ (string_of_arithmetic_expression variable_names expr2)

(** Convert a boolean expression into a string *)
let string_of_boolean variable_names boolean_expr =
	string_of_boolean_template variable_names boolean_expr string_of_logical_operators

(** Return if there is no clock updates *)
let no_clock_updates clock_updates =
	clock_updates = No_update || clock_updates = Resets [] || clock_updates = Updates []

(** Returns when add comma separators between clock and discrete updates and
between discrete and conditional updates *)
let separator_comma updates =
	let no_clock_updates_ = no_clock_updates updates.clock in
	let no_discrete_updates = updates.discrete = [] in
	let no_conditional_updates = updates.conditional = [] in

	let first_separator = not (no_clock_updates_ || no_discrete_updates) in
	let second_separator = not (no_conditional_updates || (no_clock_updates_ && no_discrete_updates)) in
	(first_separator, second_separator)

(** Generic template to convert conditional updates into a string *)
let string_of_conditional_updates_template model conditional_updates string_of_clock_updates string_of_discrete_updates wrap_if wrap_else wrap_end sep =
	string_of_list_of_string_with_sep sep (List.map (fun (boolean_expr, if_updates, else_updates) ->
		let if_separator, _ = separator_comma if_updates in
		let empty_else = no_clock_updates else_updates.clock && else_updates.discrete = [] && else_updates.conditional = [] in
		(** Convert the boolean expression *)
		(wrap_if boolean_expr)
		(** Convert the if updates *)
		^ (string_of_clock_updates model if_updates.clock)
		^ (if if_separator then sep else "")
		^ (string_of_discrete_updates model if_updates.discrete)
		(** Convert the else updates *)
		^ (if empty_else then "" else
			let else_separator, _ = separator_comma else_updates in
			wrap_else
			^ (string_of_clock_updates model else_updates.clock)
			^ (if else_separator then sep else "")
			^ (string_of_discrete_updates model else_updates.discrete))
		^ wrap_end
	) conditional_updates)

(** Convert a list of conditional updates into a string *)
let string_of_conditional_updates model conditional_updates =
	let wrap_if boolean_expr  = "if (" ^ (string_of_boolean model.variable_names boolean_expr) ^  ") then " in
	let wrap_else = " else " in
	let wrap_end = " end" in
	let sep = ", " in
	string_of_conditional_updates_template model conditional_updates string_of_clock_updates string_of_discrete_updates wrap_if wrap_else wrap_end sep

(* Convert a transition into a string *)
let string_of_transition model automaton_index transition =
	let clock_updates = transition.updates.clock in
	let discrete_updates = transition.updates.discrete in
	let conditional_updates = transition.updates.conditional in
	let first_separator, second_separator = separator_comma transition.updates in

	"\n\t" ^ "when "
	(* Convert the guard *)
	^ (string_of_guard model.variable_names transition.guard)
	(* Convert the sync *)
	^ (string_of_sync model transition.action)
	(* Convert the updates *)
	^ (if (string_of_clock_updates model clock_updates) = "" || (string_of_discrete_updates model discrete_updates) = ""
     || (string_of_conditional_updates model conditional_updates) = "" then "" else (""
    ^ " do {"
	(* Clock updates *)
	^ (string_of_clock_updates model clock_updates)
	(* Add a coma in case of both clocks and discrete *)
	^ (if first_separator then "& " else "")
	(* Discrete updates *)
	^ (string_of_discrete_updates model discrete_updates)
	(* Add a coma in case of both clocks and discrete and conditions *)
	^ (if second_separator then "& " else "")
	(* Conditional updates *)
	^ (string_of_conditional_updates model conditional_updates)
	^ "} "))
	(* Convert the destination location *)
	^ " goto " ^ (model.location_names automaton_index transition.target)
	^ ";"



(* Convert the transitions of a location into a string *)
let string_of_transitions model automaton_index location_index =
	string_of_list_of_string (
	(* For each action *)
	List.map (fun action_index ->
		(* Get the list of transitions *)
		let transitions = model.transitions automaton_index location_index action_index in
		(* Convert to string *)
		string_of_list_of_string (
			(* For each transition *)
			List.map (string_of_transition model automaton_index) (List.map model.transitions_description transitions)
			)
		) (model.actions_per_location automaton_index location_index)
	)


(* Convert a location of an automaton into a string *)
let string_of_location model automaton_index location_index =
	"\n"
	^ (if model.is_urgent automaton_index location_index then "urgent " else "")
	^ (if model.is_accepting automaton_index location_index then "accepting " else "")
	^ "loc "
	^ (model.location_names automaton_index location_index)
	 ^ (match model.costs automaton_index location_index with
		| None -> ""
		| Some cost -> "[" ^ (LinearConstraint.string_of_p_linear_term model.variable_names cost) ^ "]"
	)
	^ ": "
	^ (string_of_invariant model automaton_index location_index) (* bug here! *)
	^ (string_of_transitions model automaton_index location_index)


(* Convert the locations of an automaton into a string *)
let string_of_locations model automaton_index =
	string_of_list_of_string_with_sep "\n " (List.map (fun location_index ->
(* 		print_message Verbose_high ("location_index : " ^ (string_of_int location_index)); *)
		string_of_location model automaton_index location_index
	) (model.locations_per_automaton automaton_index))



(**********************************************)
(* added fonctions *)

let explode s =
  let rec exp i l =
    if i < 0 then l else exp (i - 1) (s.[i] :: l) in
  exp (String.length s - 1) [] ;;

let rec string_lst_change_egale = function
  | [] -> let a =' ' in a::[]
  | (h::t) when h = '<' || h = '>' || h = '\n'-> ' '::(string_lst_change_egale t) 
  | (h::t) ->  h::(string_lst_change_egale t);;



let string_of_chars chars = 
  let buf = Buffer.create 16 in
  List.iter (Buffer.add_char buf) chars;
  Buffer.contents buf ;;

(**let my_modified_strings = {
	true_string   : "true";
	false_string  : "false";
	and_operator  : "\n& ";
	or_operator   : " or ";
	l_operator    : " < ";
	le_operator   : " <= ";
	eq_operator   : " == ";
	ge_operator   : " >= ";
	g_operator    : " > ";
}**)


(************************************************************)
(** Initial state *)
(************************************************************)
let rec  string_of_initial_state () =
	(* Retrieve the model *)
	let model = Input.get_model () in

	(* Header of initial state *)
	"\n"
	^ "\n" ^ "// ----------------------------------------------------------"
	^ "\n" ^ "//  Initial state "
	^ "\n" ^ "// ----------------------------------------------------------"
	^ "\n" ^ ""
	^ "\n" ^ ""

	(* Initial location *)
	^ "\n" ^ "// ------------------------------------------------------------"
	^ "\n" ^ "//  Initial location "
	^ "\n" ^ "// ------------------------------------------------------------"
	^
	(*** WARNING: Do not print the observer ***)
	let pta_without_obs = List.filter (fun automaton_index -> not (model.is_observer automaton_index)) model.automata
	in

	(* Handle all (other) PTA *)
	let inital_global_location  = model.initial_location in
	let initial_automata = List.map
	(fun automaton_index ->
		(* Finding the initial location for this automaton *)
		let initial_location = Location.get_location inital_global_location automaton_index in
		(* '& loc[pta] = location' *)
		"" 
	) pta_without_obs
	in string_of_list_of_string initial_automata

	(* Initial discrete assignments *)
	^ "\n" ^ ""
	^ "\n" ^ "// ------------------------------------------------------------"
	^ "\n" ^ "//  Initial discrete assignments "
	^ "\n" ^ "// ------------------------------------------------------------"
	^
	let initial_discrete = List.map
	(fun discrete_index ->
		(* Finding the initial value for this discrete *)
		let initial_value = Location.get_discrete_value inital_global_location discrete_index in
		(* '& var = val' *)
		"\n& " ^ (model.variable_names discrete_index) ^ " = " ^ (NumConst.string_of_numconst initial_value)
	) model.discrete
	in string_of_list_of_string initial_discrete

	(* Initial constraint *)
	^ "\n" ^ ""
	^ "\n" ^ "// ------------------------------------------------------------"
	^ "\n" ^ "//  Initial constraint "
	^ "\n" ^ "// ------------------------------------------------------------"
	^ "\n" ^ string_of_chars (string_lst_change_egale (explode (LinearConstraint.string_of_px_linear_constraint model.variable_names model.initial_constraint)))
    ^ " & true"
	(* Footer of initial state *)
	^ "" ^ ";";;
let i = 0 ;;

(* Convert an automaton into a string *)
let string_of_automaton model automaton_index =
	  "\n// ----------------------------------------------------------"
    ^ "\n// System Description"
    ^ "\n// ----------------------------------------------------------"
	^ "\nautomaton " ^ (model.automata_names automaton_index)
    ^ "\n" ^ (string_of_declarations model)
	^ "\n" ^ (string_of_synclabs model automaton_index)
	^ "\n" ^ (string_of_locations model automaton_index)
    ^ "\n" ^ "\ninitially : " ^ (model.location_names i i) ^ " &" ^ (string_of_initial_state () )
	^ "\nend // " ^ (model.automata_names automaton_index) ^ " "
	^ "\n// ----------------------------------------------------------"


(* Convert the automata into a string *)
let string_of_automata model =
	(*** WARNING: Do not print the observer ***)
	let pta_without_obs = List.filter (fun automaton_index -> not (model.is_observer automaton_index)) model.automata
	in

	(* Print all (other) PTA *)
	string_of_list_of_string_with_sep "\n\n" (
		List.map (fun automaton_index -> string_of_automaton model automaton_index
	) pta_without_obs)





(************************************************************)
(** Property *)
(************************************************************)
let property_header =
	"\n"
	^ "\n" ^ "// ----------------------------------------------------------"
	^ "\n" ^ "// Analysis Commands"
	^ "\n" ^ "// ----------------------------------------------------------"
	^ "\n" ^ ""



let string_of_unreachable_location model unreachable_global_location =
	(* Convert locations *)
	(*string_of_list_of_string_with_sep " & " (List.map (fun (automaton_index, location_index) ->
			"loc[" ^ (model.automata_names automaton_index) ^ "]" ^ " = " ^ (model.location_names automaton_index location_index)
		) unreachable_global_location.unreachable_locations
	)*)
	(*^*)
	(* Separator *)
	(if unreachable_global_location.unreachable_locations <> [] && unreachable_global_location.discrete_constraints <> [] then " & " else "")
	^
	(* Convert discrete *)
	string_of_list_of_string_with_sep " & " (List.map (function
		| Discrete_l (discrete_index , discrete_value)
			-> (model.variable_names discrete_index) ^ " < " ^ (NumConst.string_of_numconst discrete_value)
		| Discrete_leq (discrete_index , discrete_value)
			-> (model.variable_names discrete_index) ^ " <= " ^ (NumConst.string_of_numconst discrete_value)
		| Discrete_equal (discrete_index , discrete_value)
			-> (model.variable_names discrete_index) ^ " == " ^ (NumConst.string_of_numconst discrete_value)
		| Discrete_neq (discrete_index , discrete_value)
			-> (model.variable_names discrete_index) ^ " <> " ^ (NumConst.string_of_numconst discrete_value)
		| Discrete_geq (discrete_index , discrete_value)
			-> (model.variable_names discrete_index) ^ " >= " ^ (NumConst.string_of_numconst discrete_value)
		| Discrete_g (discrete_index , discrete_value)
			-> (model.variable_names discrete_index) ^ " > " ^ (NumConst.string_of_numconst discrete_value)
		| Discrete_interval (discrete_index , min_discrete_value, max_discrete_value)
			-> (model.variable_names discrete_index) ^ " in [" ^ (NumConst.string_of_numconst min_discrete_value) ^ " , " ^ (NumConst.string_of_numconst max_discrete_value) ^ "]"
		) unreachable_global_location.discrete_constraints
	)
    ^ ";"

let r = 0 ;;

(** Convert the correctness property to a string *)
let string_of_property model property =
	match property with
	(* An "OR" list of global locations *)
	| Unreachable_locations unreachable_global_location_list ->
		"reg ="^ (model.automata_names r )^".unreachable" ^ (
			string_of_list_of_string_with_sep "\n or \n " (List.map (string_of_unreachable_location model) unreachable_global_location_list)
		)

	(* if a2 then a1 has happened before *)
	| Action_precedence_acyclic (a1 , a2) ->
		"reg = if " ^ (model.action_names a2) ^ " then " ^ (model.action_names a1) ^ " has happened before;"
	(* everytime a2 then a1 has happened before *)
	| Action_precedence_cyclic (a1 , a2) ->
		"reg = everytime " ^ (model.action_names a2) ^ " then " ^ (model.action_names a1) ^ " has happened before;"
	(* everytime a2 then a1 has happened exactly once before *)
	| Action_precedence_cyclicstrict (a1 , a2) ->
		"reg = everytime " ^ (model.action_names a2) ^ " then " ^ (model.action_names a1) ^ " has happened exactly once before;"

	(*** NOTE: not implemented ***)
(*	(* if a1 then eventually a2 *)
	| Eventual_response_acyclic (a1 , a2) -> ""
	(* everytime a1 then eventually a2 *)
	| Eventual_response_cyclic (a1 , a2) -> ""
	(* everytime a1 then eventually a2 once before next *)
	| Eventual_response_cyclicstrict (a1 , a2) -> ""
	*)

	(* a no later than d *)
	| Action_deadline (a, d) ->
		"reg = " ^ (model.action_names a) ^ " no later than " ^ (LinearConstraint.string_of_p_linear_term model.variable_names d) ^ ";"

	(* if a2 then a1 happened within d before *)
	| TB_Action_precedence_acyclic (a1 , a2, d) ->
		"reg = if " ^ (model.action_names a2) ^ " then " ^ (model.action_names a1) ^ " has happened within " ^ (LinearConstraint.string_of_p_linear_term model.variable_names d) ^ " before;"
	(* everytime a2 then a1 happened within d before *)
	| TB_Action_precedence_cyclic (a1 , a2, d) ->
		"reg = everytime " ^ (model.action_names a2) ^ " then " ^ (model.action_names a1) ^ " has happened within " ^ (LinearConstraint.string_of_p_linear_term model.variable_names d) ^ " before;"
	(* everytime a2 then a1 happened once within d before *)
	| TB_Action_precedence_cyclicstrict (a1 , a2, d) ->
		"reg = everytime " ^ (model.action_names a2) ^ " then " ^ (model.action_names a1) ^ " has happened once within " ^ (LinearConstraint.string_of_p_linear_term model.variable_names d) ^ " before;"

	(* if a1 then eventually a2 within d *)
	| TB_response_acyclic (a1 , a2, d) ->
		"reg = if " ^ (model.action_names a2) ^ " then eventually " ^ (model.action_names a1) ^ " within " ^ (LinearConstraint.string_of_p_linear_term model.variable_names d) ^ ";"
	(* everytime a1 then eventually a2 within d *)
	| TB_response_cyclic (a1 , a2, d) ->
		"reg = everytime " ^ (model.action_names a2) ^ " then eventually " ^ (model.action_names a1) ^ " within " ^ (LinearConstraint.string_of_p_linear_term model.variable_names d) ^ ";"
	(* everytime a1 then eventually a2 within d once before next *)
	| TB_response_cyclicstrict (a1 , a2, d) ->
		"reg = if " ^ (model.action_names a2) ^ " then eventually " ^ (model.action_names a1) ^ " within " ^ (LinearConstraint.string_of_p_linear_term model.variable_names d) ^ " once before next;"

	(* sequence a1, …, an *)
	| Sequence_acyclic action_index_list ->
		"reg = sequence (" ^ (string_of_list_of_string_with_sep ", " (List.map model.action_names action_index_list)) ^ ");"
	(* always sequence a1, …, an *)
	| Sequence_cyclic action_index_list ->
		"reg = always sequence (" ^ (string_of_list_of_string_with_sep ", " (List.map model.action_names action_index_list)) ^ ");"

	(*** NOTE: Would be better to have an "option" type ***)
	| Noproperty -> "(* no property *)"

(** Convert the projection to a string *)
let string_of_projection model =
	match model.projection with
	| None -> ""
	| Some parameter_index_list ->
		"\nprojectresult(" ^ (string_of_list_of_string_with_sep ", " (List.map model.variable_names parameter_index_list)) ^ ");"


(** Convert the optimization to a string *)
let string_of_optimization model =
	match model.optimized_parameter with
	| No_optimization -> ""
	| Minimize parameter_index ->
		"minimize(" ^ (model.variable_names parameter_index) ^ ");"
	| Maximize parameter_index ->
		"maximize(" ^ (model.variable_names parameter_index) ^ ");"


(************************************************************)
(** Model *)
(************************************************************)

(* Convert the model into a string *)
let string_of_model model =
	(* The header *)
	string_of_header model
	(* The variable declarations *)
	(*^  "\n" ^ string_of_declarations model/*)
	(* The initial state *)
	(*^ "\n" ^ string_of_initial_state ()*)
	(* All automata *)
	^  "\n" ^ string_of_automata model
	(* The property *)
	^ property_header
	^  "\n" ^ string_of_property model model.user_property
	(* The projection *)
	^  "\n" ^ string_of_projection model
	(* The optimization *)
	^  "\n" ^ string_of_optimization model
	(* The footer *)
	^  "\n" ^ footer



(************************************************************)
(** PX-valuation *)
(************************************************************)
(* Convert a valuation into a string *)
let string_of_valuation variables variable_names valuation =
	string_of_list_of_string_with_sep " & " (
		List.map (fun variable ->
			(variable_names variable)
			^ " = "
			^ (NumConst.string_of_numconst (valuation variable))
		) variables
	)

(* Convert a px-valuation into a string *)
let string_of_px_valuation model = string_of_valuation model.parameters_and_clocks model.variable_names

(* Convert an x-valuation into a string *)
let string_of_x_valuation model = string_of_valuation model.clocks model.variable_names





(************************************************************)
(** States *)
(************************************************************)

(* Convert a location name into a string *)
(*let string_of_location_name model location =
	let string_array = List.map (fun automaton_index location_index ->
		model.automata_names.(automaton_index) ^ ": " ^ (model.location_names automaton_index location_index)
	) location in
	string_of_array_of_string_with_sep ", " string_array*)

(* Convert a state into a string *)
let string_of_state model (state : state) =
	(* Retrieve the input options *)
	let options = Input.get_options () in

	"" ^ (Location.string_of_location model.automata_names model.location_names model.variable_names options#output_float state.global_location) ^ " ==> \n&" ^ (LinearConstraint.string_of_px_linear_constraint model.variable_names state.px_constraint) ^ ""

let string_of_concrete_state model (state : State.concrete_state) =
	(* Retrieve the input options *)
	let options = Input.get_options () in

	"" ^ (Location.string_of_location model.automata_names model.location_names model.variable_names options#output_float state.global_location) ^ " ==> \n" ^ (string_of_px_valuation model state.px_valuation) ^ ""
	
